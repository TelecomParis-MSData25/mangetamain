name: CI/CD Pipeline

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync --dev

      - name: Install Kaggle CLI
        run: uv run pip install kaggle

      - name: Configure Kaggle credentials
        if: env.KAGGLE_USERNAME != '' && env.KAGGLE_KEY != ''
        run: |
          mkdir -p ~/.kaggle
          cat <<EOF > ~/.kaggle/kaggle.json
          {"username":"$KAGGLE_USERNAME","key":"$KAGGLE_KEY"}
          EOF
          chmod 600 ~/.kaggle/kaggle.json

      - name: Download Food.com dataset
        run: bash scripts/download_dataset.sh

      - name: Run tests
        run: uv run pytest --cov=src --cov-report=xml --junitxml=pytest-report.xml

      - name: Build documentation
        run: uv run sphinx-build -b html docs/source docs/build/html

      - name: Upload coverage and test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-test-artifacts
          path: |
            coverage.xml
            pytest-report.xml

  main-pipeline:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: []
    env:
      KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
      KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync --dev

      - name: Install Kaggle CLI
        run: uv run pip install kaggle

      - name: Configure Kaggle credentials
        if: env.KAGGLE_USERNAME != '' && env.KAGGLE_KEY != ''
        run: |
          mkdir -p ~/.kaggle
          cat <<EOF > ~/.kaggle/kaggle.json
          {"username":"$KAGGLE_USERNAME","key":"$KAGGLE_KEY"}
          EOF
          chmod 600 ~/.kaggle/kaggle.json

      - name: Download Food.com dataset
        run: bash scripts/download_dataset.sh

      - name: Run tests
        run: |
          uv run pytest --cov=src --cov-report=xml --cov-report=html --junitxml=pytest-report.xml --cov-fail-under=20

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-html
          path: |
            htmlcov/
            coverage.xml

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-report
          path: pytest-report.xml

  build-docs:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: main-pipeline
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Install dependencies
        run: uv sync --dev

      - name: Build documentation
        run: uv run sphinx-build -b html docs/source docs/build/html

      - name: Deploy documentation to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/html

  build-and-push-docker:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: main-pipeline
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security-scan:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: main-pipeline
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif
